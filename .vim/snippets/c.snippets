snippet /       单行注释
	// ${1}
snippet //      多行注释
	/* ${1}*/
snippet -       分隔注释
	// -------------------------------${1}
# 预处理
snippet in      包含系统头文件
	#include <${1}.h>${2}
snippet in.     包含自定义头文件
	#include "${1}.h"${2}
snippet ins     包括标准头文件
	#include <stdio.h>${1}
snippet df      宏定义
	#define ${1}
snippet ifdf    包含了指定头文件时的处理方式
	#ifdef ${1}
	${2}
	#endif
snippet ifndf   防止头文件重复包含
	#ifndef _HEAD_${1:}_H_
	#define _HEAD_$1_H_

	${2}

	#endif
# 函数
snippet main    主函数
	int
	main (int argc, char *argv[]) {

	  ${1}

	  return 0;

	}  // main
snippet f       函数定义
	${1:f_name} (${2}) {

	  ${3}

	}  // function
snippet fd      函数声明
	${1:f_name} (${2});
# 复合类型
snippet str     结构体定义
	struct ${1:str_name} {
	  ${2}
	};
snippet uni     共用体
	union ${1:uni_name} {
	  ${2}
	};
snippet enu     枚举定义
	enum ${1:enu_name} {${2}};
snippet tp      类型定义
	typedef ${1}
snippet tps     定义结构体类型
	typedef struct ${1} {
	  ${2}
	} ${3:str_name};
snippet tpu     定义共用体类型
	typedef union ${1} {
	  ${2}
	} ${3:uni_name};
snippet tpe     定义枚举类型
	typedef enum ${1} {
	  ${2}
	} ${3:enu_name};
# 流程控制
snippet if      if
	if (${1}) {
	  ${2}
	}
snippet elif    else if
	else if (${1}) {
	  ${2}
	}
snippet el      else
	else {
	  ${1}
	}
snippet fo      for
	for (${1}) {
	  ${2}
	}  // for
snippet wh      while
	while (${1}) {
	  ${2}
	}  // while
snippet do      do-while
	do {
	  ${2}
	}
	while (${1});
snippet sw      switch
	switch (${1}) {
	  ${2}
	}  // switch
snippet cs      case
	case ${1}:
	  ${2}
snippet def     default
	default:
	  ${1}
# 输入输出
snippet p       输出
	printf("${1}"${2});
snippet s       输入
	scanf("${1}", ${2});
snippet spr
	sprintf(${1:stderr}, "${2:%s}", ${3});
snippet fpr
	fprintf(${1:stderr}, "${2:%s}"${3});
# 单个关键字
snippet ex      退出并返回状态码
	exit(${1});
snippet re      返回
	return ${1};
snippet co      继续
	continue;${1}
snippet br      中断
	break;${1}
snippet go      跳转
	goto ${1}
snippet un      无符号
	unsigned ${1}
snippet st      静态
	static ${1}
snippet con     常量声明
	const ${1}
snippet reg     寄存器变量
	register ${1}
snippet vol     声明值有可能不受编译器控制
	volatile ${1}
snippet inl     内联函数
	inline ${1}
snippet res     声明指针是访问其所指对象的唯一方式
	restrict ${1}
snippet ext     声明外部变量
	extern ${1}
snippet sz      计算占用的内存大小
	sizeof(${1})
snippet .       ->
	->${1}
